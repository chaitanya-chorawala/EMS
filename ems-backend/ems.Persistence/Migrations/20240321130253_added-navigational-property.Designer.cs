// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ems.Persistence.Configuration;

#nullable disable

namespace ems.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240321130253_added-navigational-property")]
    partial class addednavigationalproperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ems.Common.Entities.APILogs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QueryString")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RequestAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestBody")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ResponseAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("text");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("APILogs", "Logging");
                });

            modelBuilder.Entity("ems.Common.Entities.CancellationPolicy", b =>
                {
                    b.Property<int>("CancellationPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CancellationPolicyId"));

                    b.Property<string>("CancellationName")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<decimal>("CancellationValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CancellationValueTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int?>("DisplaySortOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("FromHour")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRefundable")
                        .HasColumnType("boolean");

                    b.Property<string>("RefundPolicy")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("ToHour")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CancellationPolicyId");

                    b.HasIndex("CancellationValueTypeId");

                    b.ToTable("CancellationPolicy");
                });

            modelBuilder.Entity("ems.Common.Entities.CostMasterAuditLog", b =>
                {
                    b.Property<int>("CostMasterAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CostMasterAuditLogId"));

                    b.Property<decimal?>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("MinimumSell")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("RackRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketCategoryPaxTypeMappingId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CostMasterAuditLogId");

                    b.HasIndex("TicketCategoryPaxTypeMappingId");

                    b.ToTable("CostMasterAuditLog");
                });

            modelBuilder.Entity("ems.Common.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("TypeId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("ems.Common.Entities.EventAgenda", b =>
                {
                    b.Property<int>("EventAgendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventAgendaId"));

                    b.Property<int>("AgendaTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Title")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Track")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventAgendaId");

                    b.HasIndex("EventId");

                    b.ToTable("EventAgenda");
                });

            modelBuilder.Entity("ems.Common.Entities.EventAgentWiseSellMaster", b =>
                {
                    b.Property<int>("EventAgentWiseSellMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventAgentWiseSellMasterId"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EventCostMasterId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MarkupAmount")
                        .HasPrecision(18, 7)
                        .HasColumnType("numeric(18,7)");

                    b.Property<int?>("MarkupTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SellAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventAgentWiseSellMasterId");

                    b.HasIndex("EventCostMasterId");

                    b.ToTable("EventAgentWiseSellMaster");
                });

            modelBuilder.Entity("ems.Common.Entities.EventCostMaster", b =>
                {
                    b.Property<int>("EventCostMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventCostMasterId"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MinimumSell")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("RackRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("TicketCategoryPaxTypeMappingId")
                        .HasColumnType("integer");

                    b.HasKey("EventCostMasterId");

                    b.HasIndex("TicketCategoryPaxTypeMappingId");

                    b.ToTable("EventCostMaster");
                });

            modelBuilder.Entity("ems.Common.Entities.EventDescriptionSection", b =>
                {
                    b.Property<int>("EventDescriptionSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventDescriptionSectionId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(526)
                        .HasColumnType("character varying(526)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventDescriptionSectionId");

                    b.HasIndex("EventId");

                    b.ToTable("EventDescriptionSection");
                });

            modelBuilder.Entity("ems.Common.Entities.EventDetail", b =>
                {
                    b.Property<int>("EventDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventDetailId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultImageUrl")
                        .HasMaxLength(516)
                        .HasColumnType("character varying(516)");

                    b.Property<int>("EventAccessId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TimezoneId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("EventDetailId");

                    b.HasIndex("EventAccessId");

                    b.HasIndex("EventId");

                    b.HasIndex("VenueId");

                    b.ToTable("EventDetail");
                });

            modelBuilder.Entity("ems.Common.Entities.EventMedia", b =>
                {
                    b.Property<int>("EventMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventMediaId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("DisplaySortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(526)
                        .HasColumnType("character varying(526)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(516)
                        .HasColumnType("character varying(516)");

                    b.HasKey("EventMediaId");

                    b.HasIndex("EventId");

                    b.ToTable("EventMedia");
                });

            modelBuilder.Entity("ems.Common.Entities.EventOptionMaster", b =>
                {
                    b.Property<int>("EventOptionMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventOptionMasterId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CutOff")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool?>("DisableChild")
                        .HasColumnType("boolean");

                    b.Property<bool?>("DisableInfant")
                        .HasColumnType("boolean");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Exclusion")
                        .HasColumnType("text");

                    b.Property<bool?>("FreeSell")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Inclusion")
                        .HasColumnType("text");

                    b.Property<bool?>("InstantConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsOnlineCheckIn")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWaiverFrom")
                        .HasColumnType("boolean");

                    b.Property<string>("MaxPax")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MinPax")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Minquantity")
                        .HasColumnType("integer");

                    b.Property<int?>("MultiPax")
                        .HasColumnType("integer");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool?>("Requiredhrs")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Track")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventOptionMasterId");

                    b.HasIndex("EventId");

                    b.ToTable("EventOptionMaster");
                });

            modelBuilder.Entity("ems.Common.Entities.EventOptionTagMapping", b =>
                {
                    b.Property<int>("EventOptionTagMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventOptionTagMappingId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventOptionMasterId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventOptionTagMappingId");

                    b.HasIndex("EventOptionMasterId");

                    b.HasIndex("TagId");

                    b.ToTable("EventOptionTagMapping");
                });

            modelBuilder.Entity("ems.Common.Entities.EventOptionTimeSlot", b =>
                {
                    b.Property<int>("EventOptionTimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventOptionTimeSlotId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("EventOptionMasterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventOptionTimeSlotId");

                    b.HasIndex("EventOptionMasterId");

                    b.ToTable("EventOptionTimeSlot");
                });

            modelBuilder.Entity("ems.Common.Entities.EventSellMasterAuditLog", b =>
                {
                    b.Property<int>("EventSellMasterAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventSellMasterAuditLogId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EventCostMasterId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MarkupAmount")
                        .HasPrecision(18, 7)
                        .HasColumnType("numeric(18,7)");

                    b.Property<int?>("MarkupTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SellAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventSellMasterAuditLogId");

                    b.ToTable("EventSellMasterAuditLog");
                });

            modelBuilder.Entity("ems.Common.Entities.EventTagMapping", b =>
                {
                    b.Property<int>("EventTagMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventTagMappingId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventTagMappingId");

                    b.HasIndex("EventId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTagMapping");
                });

            modelBuilder.Entity("ems.Common.Entities.EventTarrifWiseSellMaster", b =>
                {
                    b.Property<int>("EventTarrifWiseSellMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventTarrifWiseSellMasterId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EventCostMasterId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MarkupAmount")
                        .HasPrecision(18, 7)
                        .HasColumnType("numeric(18,7)");

                    b.Property<int?>("MarkupTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SellAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TarrifId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventTarrifWiseSellMasterId");

                    b.HasIndex("EventCostMasterId");

                    b.ToTable("EventTarrifWiseSellMaster");
                });

            modelBuilder.Entity("ems.Common.Entities.FilePath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("FilePath");
                });

            modelBuilder.Entity("ems.Common.Entities.FormatConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormatConfiguration");
                });

            modelBuilder.Entity("ems.Common.Entities.JwtRefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId");

                    b.ToTable("UserJwtRefreshToken");
                });

            modelBuilder.Entity("ems.Common.Entities.MailAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MailId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MailId");

                    b.ToTable("MailAttachment");
                });

            modelBuilder.Entity("ems.Common.Entities.MailMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CC")
                        .HasColumnType("text");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("FromMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("MailMaster");
                });

            modelBuilder.Entity("ems.Common.Entities.MasterDataMapping", b =>
                {
                    b.Property<int>("MasterDataMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MasterDataMappingId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GroupValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusFlag")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MasterDataMappingId");

                    b.ToTable("MasterDataMapping");
                });

            modelBuilder.Entity("ems.Common.Entities.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly?>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("ems.Common.Entities.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeatId"));

                    b.Property<int>("AvailabilityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeatMapData")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SeatId");

                    b.HasIndex("SectionId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("ems.Common.Entities.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SectionId"));

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Floor")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("SeatMapData")
                        .HasColumnType("text");

                    b.Property<int>("SeatingTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TicketCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SectionId");

                    b.HasIndex("TicketCategoryId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("ems.Common.Entities.ServiceConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceConfiguration");
                });

            modelBuilder.Entity("ems.Common.Entities.Tags", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TagKeyword")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("TagName")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("TagTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ems.Common.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketId"));

                    b.Property<int?>("AllowDuplicateAttendees")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("RegistrationTimeLimit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ShowTicketAvailability")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TicketAdditionalTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TicketCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketIssueTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketCategoryId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("ems.Common.Entities.TicketCategory", b =>
                {
                    b.Property<int>("TicketCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketCategoryId"));

                    b.Property<int>("CancellationPolicyId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventOptionTimeSlotId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("IsAmountOff")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.Property<int?>("IsFeatured")
                        .HasColumnType("integer");

                    b.Property<int?>("IsPdfTicket")
                        .HasColumnType("integer");

                    b.Property<decimal?>("IsPercentageOff")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.Property<bool?>("IsRefundable")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("integer");

                    b.Property<int?>("MinQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("QuantitySold")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.Property<string>("SeatmapDataColor")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("VisibilityTypeId")
                        .HasColumnType("integer");

                    b.HasKey("TicketCategoryId");

                    b.HasIndex("CancellationPolicyId");

                    b.HasIndex("EventOptionTimeSlotId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("TicketCategory");
                });

            modelBuilder.Entity("ems.Common.Entities.TicketCategoryPaxTypeMapping", b =>
                {
                    b.Property<int>("TicketCategoryPaxTypeMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketCategoryPaxTypeMappingId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PaxTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TicketCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TicketCategoryPaxTypeMappingId");

                    b.HasIndex("PaxTypeId");

                    b.HasIndex("TicketCategoryId");

                    b.ToTable("TicketCategoryPaxTypeMapping");
                });

            modelBuilder.Entity("ems.Common.Entities.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VenueId"));

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("AgeLimit")
                        .HasColumnType("integer");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)");

                    b.Property<string>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("VenueId");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("ems.Common.Entities.VenueEventTimeSlotMapping", b =>
                {
                    b.Property<int>("VenueEventTimeSlotMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VenueEventTimeSlotMappingId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventOptionTimeSlotId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("VenueEventTimeSlotMappingId");

                    b.HasIndex("EventOptionTimeSlotId");

                    b.HasIndex("VenueId");

                    b.ToTable("VenueEventTimeSlotMapping");
                });

            modelBuilder.Entity("ems.Common.Entities.CancellationPolicy", b =>
                {
                    b.HasOne("ems.Common.Entities.MasterDataMapping", "CancellationValueType")
                        .WithMany()
                        .HasForeignKey("CancellationValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancellationValueType");
                });

            modelBuilder.Entity("ems.Common.Entities.CostMasterAuditLog", b =>
                {
                    b.HasOne("ems.Common.Entities.TicketCategoryPaxTypeMapping", "TicketCategoryPaxTypeMapping")
                        .WithMany("CostMasterAuditLogList")
                        .HasForeignKey("TicketCategoryPaxTypeMappingId");

                    b.Navigation("TicketCategoryPaxTypeMapping");
                });

            modelBuilder.Entity("ems.Common.Entities.Event", b =>
                {
                    b.HasOne("ems.Common.Entities.MasterDataMapping", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.MasterDataMapping", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.MasterDataMapping", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Inventory");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ems.Common.Entities.EventAgenda", b =>
                {
                    b.HasOne("ems.Common.Entities.Event", "Event")
                        .WithMany("EventAgendaList")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ems.Common.Entities.EventAgentWiseSellMaster", b =>
                {
                    b.HasOne("ems.Common.Entities.EventCostMaster", "EventCostMaster")
                        .WithMany("EventAgentWiseSellMasterList")
                        .HasForeignKey("EventCostMasterId");

                    b.Navigation("EventCostMaster");
                });

            modelBuilder.Entity("ems.Common.Entities.EventCostMaster", b =>
                {
                    b.HasOne("ems.Common.Entities.TicketCategoryPaxTypeMapping", "TicketCategoryPaxTypeMapping")
                        .WithMany()
                        .HasForeignKey("TicketCategoryPaxTypeMappingId");

                    b.Navigation("TicketCategoryPaxTypeMapping");
                });

            modelBuilder.Entity("ems.Common.Entities.EventDescriptionSection", b =>
                {
                    b.HasOne("ems.Common.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ems.Common.Entities.EventDetail", b =>
                {
                    b.HasOne("ems.Common.Entities.MasterDataMapping", "EventAccess")
                        .WithMany()
                        .HasForeignKey("EventAccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.Event", "Event")
                        .WithMany("EventDetailList")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.Venue", "Venue")
                        .WithMany("EventDetailList")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventAccess");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ems.Common.Entities.EventMedia", b =>
                {
                    b.HasOne("ems.Common.Entities.Event", "Event")
                        .WithMany("EventMediaList")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ems.Common.Entities.EventOptionMaster", b =>
                {
                    b.HasOne("ems.Common.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ems.Common.Entities.EventOptionTagMapping", b =>
                {
                    b.HasOne("ems.Common.Entities.EventOptionMaster", "EventOptionMaster")
                        .WithMany("EventOptionTagMappingList")
                        .HasForeignKey("EventOptionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.Tags", "Tag")
                        .WithMany("EventOptionTagMappingList")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventOptionMaster");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ems.Common.Entities.EventOptionTimeSlot", b =>
                {
                    b.HasOne("ems.Common.Entities.EventOptionMaster", "EventOptionMaster")
                        .WithMany("EventOptionTimeSlotList")
                        .HasForeignKey("EventOptionMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventOptionMaster");
                });

            modelBuilder.Entity("ems.Common.Entities.EventTagMapping", b =>
                {
                    b.HasOne("ems.Common.Entities.Event", "Event")
                        .WithMany("EventTagMappingList")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.Tags", "Tag")
                        .WithMany("EventTagMappingList")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ems.Common.Entities.EventTarrifWiseSellMaster", b =>
                {
                    b.HasOne("ems.Common.Entities.EventCostMaster", "EventCostMaster")
                        .WithMany("EventTarrifWiseSellMasterList")
                        .HasForeignKey("EventCostMasterId");

                    b.Navigation("EventCostMaster");
                });

            modelBuilder.Entity("ems.Common.Entities.JwtRefreshToken", b =>
                {
                    b.HasOne("ems.Common.Entities.Registration", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("ems.Common.Entities.JwtRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ems.Common.Entities.MailAttachment", b =>
                {
                    b.HasOne("ems.Common.Entities.MailMaster", "MailMaster")
                        .WithMany("Attachments")
                        .HasForeignKey("MailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MailMaster");
                });

            modelBuilder.Entity("ems.Common.Entities.MailMaster", b =>
                {
                    b.HasOne("ems.Common.Entities.Event", "Rayna")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.Navigation("Rayna");
                });

            modelBuilder.Entity("ems.Common.Entities.Seat", b =>
                {
                    b.HasOne("ems.Common.Entities.Section", "Section")
                        .WithMany("SeatList")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("ems.Common.Entities.Section", b =>
                {
                    b.HasOne("ems.Common.Entities.TicketCategory", "TicketCategory")
                        .WithMany("SectionList")
                        .HasForeignKey("TicketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketCategory");
                });

            modelBuilder.Entity("ems.Common.Entities.Ticket", b =>
                {
                    b.HasOne("ems.Common.Entities.Event", "Event")
                        .WithMany("TicketList")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.TicketCategory", "TicketCategory")
                        .WithMany("TicketList")
                        .HasForeignKey("TicketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("TicketCategory");
                });

            modelBuilder.Entity("ems.Common.Entities.TicketCategory", b =>
                {
                    b.HasOne("ems.Common.Entities.CancellationPolicy", "CancellationPolicy")
                        .WithMany("TicketCategoryList")
                        .HasForeignKey("CancellationPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.EventOptionTimeSlot", "EventOptionTimeSlot")
                        .WithMany("TicketCategoryList")
                        .HasForeignKey("EventOptionTimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.MasterDataMapping", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancellationPolicy");

                    b.Navigation("EventOptionTimeSlot");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("ems.Common.Entities.TicketCategoryPaxTypeMapping", b =>
                {
                    b.HasOne("ems.Common.Entities.MasterDataMapping", "PaxType")
                        .WithMany()
                        .HasForeignKey("PaxTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.TicketCategory", "TicketCategory")
                        .WithMany("TicketCategoryPaxTypeMappingList")
                        .HasForeignKey("TicketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaxType");

                    b.Navigation("TicketCategory");
                });

            modelBuilder.Entity("ems.Common.Entities.VenueEventTimeSlotMapping", b =>
                {
                    b.HasOne("ems.Common.Entities.EventOptionTimeSlot", "EventOptionTimeSlot")
                        .WithMany("VenueEventTimeSlotMappingList")
                        .HasForeignKey("EventOptionTimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ems.Common.Entities.Venue", "Venue")
                        .WithMany("VenueEventTimeSlotMappingList")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventOptionTimeSlot");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ems.Common.Entities.CancellationPolicy", b =>
                {
                    b.Navigation("TicketCategoryList");
                });

            modelBuilder.Entity("ems.Common.Entities.Event", b =>
                {
                    b.Navigation("EventAgendaList");

                    b.Navigation("EventDetailList");

                    b.Navigation("EventMediaList");

                    b.Navigation("EventTagMappingList");

                    b.Navigation("TicketList");
                });

            modelBuilder.Entity("ems.Common.Entities.EventCostMaster", b =>
                {
                    b.Navigation("EventAgentWiseSellMasterList");

                    b.Navigation("EventTarrifWiseSellMasterList");
                });

            modelBuilder.Entity("ems.Common.Entities.EventOptionMaster", b =>
                {
                    b.Navigation("EventOptionTagMappingList");

                    b.Navigation("EventOptionTimeSlotList");
                });

            modelBuilder.Entity("ems.Common.Entities.EventOptionTimeSlot", b =>
                {
                    b.Navigation("TicketCategoryList");

                    b.Navigation("VenueEventTimeSlotMappingList");
                });

            modelBuilder.Entity("ems.Common.Entities.MailMaster", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("ems.Common.Entities.Registration", b =>
                {
                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("ems.Common.Entities.Section", b =>
                {
                    b.Navigation("SeatList");
                });

            modelBuilder.Entity("ems.Common.Entities.Tags", b =>
                {
                    b.Navigation("EventOptionTagMappingList");

                    b.Navigation("EventTagMappingList");
                });

            modelBuilder.Entity("ems.Common.Entities.TicketCategory", b =>
                {
                    b.Navigation("SectionList");

                    b.Navigation("TicketCategoryPaxTypeMappingList");

                    b.Navigation("TicketList");
                });

            modelBuilder.Entity("ems.Common.Entities.TicketCategoryPaxTypeMapping", b =>
                {
                    b.Navigation("CostMasterAuditLogList");
                });

            modelBuilder.Entity("ems.Common.Entities.Venue", b =>
                {
                    b.Navigation("EventDetailList");

                    b.Navigation("VenueEventTimeSlotMappingList");
                });
#pragma warning restore 612, 618
        }
    }
}
